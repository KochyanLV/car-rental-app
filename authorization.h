#ifndef AUTHORIZATION_H
#define AUTHORIZATION_H

#include <QDialog>
#include <QtSql>
#include <QDebug>
#include <QSqlDatabase>
#include <QSqlQuery>

/**
Функция, возвращающая Id пользователя.
*/
int getId();
/**
Функция, устанавливающая Id пользователя.
*/
void setId(int id);

/**
* Пространство имён Ui: используется для группировки автоматически сгенерированных окон
* в одном пространстве имен. Это помогает различать класс пользовательского интерфейса, созданный
* из файла пользовательского интерфейса дизайнера, и класс, реализующий функциональность.
*/
namespace Ui {class authorization;}

/**
* Класс, который предоставляет функционал
* для авторизации существующих пользователей
* и осуществляет переход на главную страницу приложения.
*/
class authorization : public QDialog{
    Q_OBJECT

public:
    /**
    * Конструктор класса authorization. В аргументы конструктора можно
    * передать указатель на родительский класс, что передаст управление памятью
    * экземпляру родительского класса. В конструкторе происходит поиск и
    * открытие доступных динамических библиотек, создаётся экземпляр потока-обработчика.
    */
    explicit authorization(QWidget *parent = nullptr);
    /**
    * Деструктор класса Registration. Удаляет динамически
    * выделенную память, высвобождает динамические библиотеки,
    * останавливает и удаляет потокобработчик.
    */
    ~authorization();

private slots:

    /**
    * Слот-обработчик нажатия на кнопку "Регистрация",
    * осуществляющий переход на страницу регистрации
    * новых пользователей.
    */
    void on_CreateBtn_clicked();
    /**
    * Слот-обработчик нажатия на кнопку "Войти",
    * осуществляющий вход пользователя в приложения и
    * проверяющий корректность введённых данных.
    */
    void on_SingInBtn_clicked();

private:
    /**
    * Поле, хранящее указатель на экземпляр, отвечающий
    * за графический интерфейс и его элементы.
    */
    Ui::authorization *ui;

};

#endif // AUTHORIZATION_H

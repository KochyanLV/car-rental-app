#ifndef APPWINDOW_H
#define APPWINDOW_H

#include <QDialog>
#include <QtSql>
#include <QDebug>
#include <QSqlDatabase>
#include <QSqlQuery>


/**
* Пространство имён Ui: используется для группировки автоматически сгенерированных окон 
* в одном пространстве имен. Это помогает различать класс пользовательского интерфейса, созданный 
* из файла пользовательского интерфейса дизайнера, и класс, реализующий функциональность.
*/

namespace Ui {class AppWindow;}

/**
* Главный класс, отображающий графический интерфейс 
* (главное меню нашего приложения) и содержащий в себе
* обработчики пользовательского ввода.
*/

class AppWindow : public QDialog{
    Q_OBJECT

public:
    /**
    * Конструктор класса Appwindow. В аргументы конструктора можно
    * передать указатель на родительский класс, что передаст управление памятью
    * экземпляру родительского класса. В конструкторе происходит поиск и
    * открытие доступных динамических библиотек, создаётся экземпляр потока-обработчика.
    */
    explicit AppWindow(QWidget* parent = nullptr);
    /**
    * Деструктор класса Appwindow. Удаляет динамически 
    * выделенную память, высвобождает динамические библиотеки, 
    * останавливает и удаляет потокобработчик.
    */
    ~AppWindow();


private slots:
    /**
    * Слот-обработчик нажатия на кнопку "Профиль", 
    * осуществляющий переход на страницу приложения, 
    * где содержится основная информация о пользователе.
    */
    void on_ProfileBtn_clicked();
    /**
    * Слот-обработчик нажатия на кнопку "Аренда",
    * осуществляющий переход на страницу приложения,
    * где содержится информация о доступных для аренды автомобилях.
    */
    void on_RentCarBtn_clicked();
    /**
    * Слот-обработчик нажатия на кнопку "Возврат",
    * осуществляющий переход на страницу приложения,
    * где содержится информация о находящихся
    * в аренде у пользователя автомобилях.
    */
    void on_ReturnCarBtn_clicked();
    /**
    * Слот-обработчик нажатия на кнопку "Цена",
    * осуществляющий переход на страницу приложения,
    * где содержится информация об итоговой стоимости аренды.
    */
    void on_PriceBtn_clicked();
    /**
    * Слот-обработчик нажатия на кнопку "Выйти",
    * осуществляющий выход из профиля и переход на 
    * страницу входа в приложение.
    */
    void on_LogoutBtn_clicked();
    /**
    * Слот-обработчик нажатия на кнопку "Арендовать",
    * осуществляющий аренду автомобиля, обновление базы данных
    * и внесение изменений в неё.
    */
    void on_RentBtn_clicked();
    /**
    * Слот-обработчик нажатия на кнопку "Вернуть",
    * осуществляющий возврат автомобиля из аренды, 
    * обновление базы данных и внесение изменений в неё.
    */
    void on_ReturnBtn_clicked();
    /**
    * Метод обновления базы данных.
    */
    void refreshTableViews();

private:
    /**
    * Поле, хранящее указатель на экземпляр, отвечающий 
    * за графический интерфейс и его элементы.
    */
    Ui::AppWindow *ui;
};

#endif // APPWINDOW_H
